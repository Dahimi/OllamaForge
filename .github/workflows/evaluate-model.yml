name: OllamaForge Model Evaluation

on:
  pull_request:
    paths:
      - 'tasks/**'
  workflow_dispatch:
    inputs:
      skip_evaluation:
        description: 'Skip evaluation (for testing)'
        type: boolean
        default: false

jobs:
  check-single-task:
    runs-on: ubuntu-latest
    outputs:
      task_path: ${{ steps.get-task.outputs.task_path }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Needed for git diff
        
    - name: Get changed task
      id: get-task
      run: |
        # Get all changed files in tasks/ directory
        CHANGED_TASKS=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }} | grep '^tasks/' || true)
        
        # Extract unique task paths (first directory under tasks/)
        UNIQUE_TASKS=$(echo "$CHANGED_TASKS" | awk -F'/' '{print $2}' | sort -u)
        TASK_COUNT=$(echo "$UNIQUE_TASKS" | grep -v '^$' | wc -l)
        
        if [ "$TASK_COUNT" -eq 0 ]; then
          echo "No task changes detected"
          exit 1
        elif [ "$TASK_COUNT" -gt 1 ]; then
          echo "Error: Changes detected in multiple tasks. Please submit separate PRs for each task."
          echo "Changed tasks:"
          echo "$UNIQUE_TASKS"
          exit 1
        fi
        
        TASK_PATH="tasks/$UNIQUE_TASKS"
        echo "task_path=$TASK_PATH" >> $GITHUB_OUTPUT
        echo "Detected task: $TASK_PATH"

  evaluate:
    needs: check-single-task
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_evaluation }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install psutil ollama
        
    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        
    - name: Start Ollama server
      run: |
        ollama serve &
        sleep 5  # Wait for server to start
        
    - name: Create model from PR
      run: |
        MODEL_NAME="${{ needs.check-single-task.outputs.task_path }}-pr-${{ github.event.pull_request.number }}"
        MODEL_NAME=${MODEL_NAME//\//-}  # Replace / with - in model name
        ollama create $MODEL_NAME -f ${{ needs.check-single-task.outputs.task_path }}/model/Modelfile
        echo "MODEL_NAME=$MODEL_NAME" >> $GITHUB_ENV
        
    - name: Run evaluation
      env:
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      run: |
        python scripts/evaluate_task.py "${{ needs.check-single-task.outputs.task_path }}" "$MODEL_NAME"

    - name: Determine tags
      id: tags
      run: |
        METRICS_FILE="${{ needs.check-single-task.outputs.task_path }}/evaluation/latest_metrics.json"
        TAGGED_NAME=$(python scripts/determine_tags.py "$METRICS_FILE")
        echo "tagged_name=$TAGGED_NAME" >> $GITHUB_OUTPUT
        echo "Model will be tagged as: $TAGGED_NAME"

  push-to-hub:
    needs: [check-single-task, evaluate]
    if: ${{ always() && (needs.evaluate.result == 'success' || inputs.skip_evaluation) }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        
    - name: Start Ollama server
      run: |
        ollama serve &
        sleep 5  # Wait for server to start

    - name: Create model
      run: |
        MODEL_NAME="${{ needs.check-single-task.outputs.task_path }}-pr-${{ github.event.pull_request.number }}"
        MODEL_NAME=${MODEL_NAME//\//-}  # Replace / with - in model name
        ollama create $MODEL_NAME -f ${{ needs.check-single-task.outputs.task_path }}/model/Modelfile
        echo "MODEL_NAME=$MODEL_NAME" >> $GITHUB_ENV

    - name: Set up SSH for Ollama
      run: |
        mkdir -p ~/.ollama
        echo "${{ secrets.OLLAMA_SSH_PRIVATE_KEY }}" > ~/.ollama/id_ed25519
        chmod 600 ~/.ollama/id_ed25519
        
        # Debug: Check SSH key
        echo "SSH key fingerprint:"
        ssh-keygen -lf ~/.ollama/id_ed25519

    - name: Push to Ollama Hub
      env:
        OLLAMA_USERNAME: ${{ secrets.OLLAMA_USERNAME }}
      run: |
        # For testing, use a simple tag if evaluation was skipped
        if [[ "${{ inputs.skip_evaluation }}" == "true" ]]; then
          TAGGED_NAME="$MODEL_NAME:test"
        else
          TAGGED_NAME="${{ needs.evaluate.outputs.tagged_name }}"
        fi
        
        # Debug: Print info (safely)
        echo "Username: $OLLAMA_USERNAME"
        echo "Model name: $MODEL_NAME"
        echo "Tagged name: $TAGGED_NAME"
        
        # Construct final name with namespace
        FINAL_NAME="${OLLAMA_USERNAME}/${TAGGED_NAME}"
        echo "Final name: $FINAL_NAME"
        
        # Try to copy and push
        set -x  # Print commands for debugging
        ollama cp "$MODEL_NAME" "$FINAL_NAME"
        ollama push "$FINAL_NAME"
        
    - name: Clean up
      if: always()
      run: |
        pkill ollama || true
        ollama rm "$MODEL_NAME" || true 