name: OllamaForge Model Evaluation

on:
  pull_request:
    paths:
      - 'tasks/**'

jobs:
  check-single-task:
    runs-on: ubuntu-latest
    outputs:
      task_path: ${{ steps.get-task.outputs.task_path }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Needed for git diff
        
    - name: Get changed task
      id: get-task
      run: |
        # Get all changed files in tasks/ directory
        CHANGED_TASKS=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }} | grep '^tasks/' || true)
        
        # Extract unique task paths (first directory under tasks/)
        UNIQUE_TASKS=$(echo "$CHANGED_TASKS" | awk -F'/' '{print $2}' | sort -u)
        TASK_COUNT=$(echo "$UNIQUE_TASKS" | grep -v '^$' | wc -l)
        
        if [ "$TASK_COUNT" -eq 0 ]; then
          echo "No task changes detected"
          exit 1
        elif [ "$TASK_COUNT" -gt 1 ]; then
          echo "Error: Changes detected in multiple tasks. Please submit separate PRs for each task."
          echo "Changed tasks:"
          echo "$UNIQUE_TASKS"
          exit 1
        fi
        
        TASK_PATH="tasks/$UNIQUE_TASKS"
        echo "task_path=$TASK_PATH" >> $GITHUB_OUTPUT
        echo "Detected task: $TASK_PATH"

  evaluate:
    needs: check-single-task
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install psutil ollama
        
    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        
    - name: Start Ollama server
      run: |
        ollama serve &
        sleep 5  # Wait for server to start
        
    - name: Create model from PR
      run: |
        MODEL_NAME="${{ needs.check-single-task.outputs.task_path }}-pr-${{ github.event.pull_request.number }}"
        MODEL_NAME=${MODEL_NAME//\//-}  # Replace / with - in model name
        ollama create $MODEL_NAME -f ${{ needs.check-single-task.outputs.task_path }}/model/Modelfile
        echo "MODEL_NAME=$MODEL_NAME" >> $GITHUB_ENV
        
    - name: Run evaluation
      env:
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      run: |
        python scripts/evaluate_task.py "${{ needs.check-single-task.outputs.task_path }}" "$MODEL_NAME"

    - name: Push to Ollama Hub
      if: success()
      env:
        OLLAMA_USERNAME: ${{ secrets.OLLAMA_USERNAME }}
        OLLAMA_SSH_PRIVATE_KEY: ${{ secrets.OLLAMA_SSH_PRIVATE_KEY }}
        OLLAMA_SSH_PUBLIC_KEY: ${{ secrets.OLLAMA_SSH_PUBLIC_KEY }}
      run: |
        # Set up SSH for Ollama
        mkdir -p ~/.ollama
        
        # Write the keys
        echo "${OLLAMA_SSH_PRIVATE_KEY}" > ~/.ollama/id_ed25519
        echo "${OLLAMA_SSH_PUBLIC_KEY}" > ~/.ollama/id_ed25519.pub
        chmod 600 ~/.ollama/id_ed25519
        chmod 644 ~/.ollama/id_ed25519.pub
        
        # Verify the key pair matches
        if ! ssh-keygen -y -f ~/.ollama/id_ed25519 | diff - ~/.ollama/id_ed25519.pub > /dev/null; then
          echo "Error: SSH key pair does not match"
          exit 1
        fi
        
        echo "SSH key pair verified successfully"
        
        # Read tags from evaluation
        TAGS=$(cat model_tags.txt || echo "")
        MODEL_NAME="${{ env.MODEL_NAME }}"
        
        # Log the push details
        echo "Pushing model: ${MODEL_NAME}"
        echo "Available tags: ${TAGS}"
        
        # Copy model with username prefix
        echo "Copying model to ${OLLAMA_USERNAME}/${MODEL_NAME}"
        ollama cp "${MODEL_NAME}" "${OLLAMA_USERNAME}/${MODEL_NAME}" || echo "Warning: Failed to copy model"
        
        # Push base model first
        echo "Pushing base model ${OLLAMA_USERNAME}/${MODEL_NAME}"
        ollama push "${OLLAMA_USERNAME}/${MODEL_NAME}" || echo "Warning: Failed to push base model"
        
        # Push tagged versions if any tags exist
        if [ ! -z "${TAGS}" ]; then
          while IFS= read -r tag; do
            if [ ! -z "${tag}" ]; then
              echo "Copying model for tag: ${tag}"
              ollama cp "${MODEL_NAME}" "${OLLAMA_USERNAME}/${MODEL_NAME}:${tag}" || echo "Warning: Failed to copy model for tag ${tag}"
              
              echo "Pushing tagged model: ${OLLAMA_USERNAME}/${MODEL_NAME}:${tag}"
              ollama push "${OLLAMA_USERNAME}/${MODEL_NAME}:${tag}" || echo "Warning: Failed to push tagged model ${tag}"
            fi
          done <<< "${TAGS}"
        fi
        
    - name: Clean up
      if: always()
      run: |
        pkill ollama || true
        ollama rm "$MODEL_NAME" || true 